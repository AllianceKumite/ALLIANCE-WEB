import { TournamentService } from 'src/app/tournament/services/tournament.service';
import { Refery, Gender, GenderOption, Dan, DanOption } from '../../../models/refery';
import { Component, OnInit, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { HomeService } from 'src/app/shared/services/home.service';
import { TranslateService } from '@ngx-translate/core';
import { environment } from '../../../../../environments/environment';
import { ReferyBrigade } from '../../../models/referybrigade.model';
import { NgSelectComponent } from '@ng-select/ng-select';
import { RegreferyService } from '../../regrefery/service/regrefery.service';
import * as XLSX from 'xlsx';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';


@Component({
  selector: 'app-refery-brigade',
  templateUrl: './refery-brigade.component.html',
  styleUrls: ['./refery-brigade.component.css']
})

export class ReferyBrigadeComponent {
  @ViewChild('sushinSelector') sushinSelector: NgSelectComponent;
  @ViewChild('fukushin1Selector') fukushin1Selector: NgSelectComponent;
  @ViewChild('fukushin2Selector') fukushin2Selector: NgSelectComponent;
  @ViewChild('fukushin3Selector') fukushin3Selector: NgSelectComponent;
  @ViewChild('fukushin4Selector') fukushin4Selector: NgSelectComponent;

  champName: string;
  isMobileView: boolean = false;
  referys: Refery[] = [];
  lng: string;
  countries: any[] = [];
  clubs: any[] = [];

  selectedRegion: number;
  selectedCountry: number;
  selectedSushin;

  filter: any = {
    title: null
  }
  flagDir: string = `${environment.mediaDir}/logos`;
  tatamicount: number = 2;
  brigadecount: number = 2;

  referyBrigades: ReferyBrigade[] = [];
  selectedRefery;


  activeBrigade: ReferyBrigade = new ReferyBrigade();
  isBuildPDF : boolean;

  constructor(
    private tournamentService: TournamentService,
    private activatedRouter: ActivatedRoute,
    private homeService: HomeService,
    private translateService: TranslateService,
    private regreferyservice : RegreferyService,


  ) {

  }

  async ngOnInit() {
    this.lng = this.defineLng();
    this.loadCountries();
    await this.loadClubs(this.selectedRegion, this.selectedCountry, this.lng);

    this.activatedRouter.parent.params.subscribe(params => {
      this.champName = params["name"];
      this.filter = {
        title: this.champName,
      };
    });

    await this.loadReferys();
  }


  getFio(referyid){
    let addStr;
    let result = this.referys.find(
      (x) => x.ReferyId == referyid
    );
   if(result){
    this.translateService
    .get('db.country.' + result?.countryId)
    .subscribe((res: string) => {
      addStr = res;
    });

    return result.FIO + ' [' + addStr + ', ' + result?.ClubName +']';
   } else{
    return "-"
   }
  }

  export() { 
    let filename = `${this.filter.title}_refery_brigade.xlsx`;
    let element = document.getElementById('tablerefery');
    const ws: XLSX.WorkSheet = XLSX.utils.table_to_sheet(element);
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Result');
    XLSX.writeFile(wb, filename);
  }

  exportReferies() { 
    let filename = `${this.filter.title}_referies_by_club.xlsx`;
    let element = document.getElementById('tablereferies');
    const ws: XLSX.WorkSheet = XLSX.utils.table_to_sheet(element);
    const wb: XLSX.WorkBook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Result');
    XLSX.writeFile(wb, filename);
  }
  
  async loadReferys(){
    this.tournamentService.getReferys(this.filter).subscribe((response: any) => {
      this.referys = Object.values(response.referys);
      this.readMaxTatamiBrigade();
      this.setDefaultBrigade();
      this.buidReadedBrigade();
      this.selectedSushin = this.referys[0].ReferyId;
      
    });
  }

  async onBuildPDF() {
    const data = document.getElementById('tablePDF');
    data.style.display = 'block';

    this.isBuildPDF = true;

    let fullName = `${this.filter.title}-refery.pdf`;

    html2canvas(data).then((canvas: any) => {
      var contentWidth = canvas.width;
      var contentHeight = canvas.height;

     
      //One page pdf shows the canvas height generated by html pages.
      var pageHeight = (contentWidth / 592.28) * 841.89;
      //html page height without pdf generation

      var leftHeight = contentHeight;
      //Page offset
      var position = 0;
      //a4 paper size [595.28, 841.89], html page generated canvas in pdf picture width
      var imgWidth = 595.28;
      var imgHeight = (592.28 / contentWidth) * contentHeight;
      var pageData = canvas.toDataURL('image/jpeg', 1.0);
      var pdf = new jsPDF('p', 'pt', 'a4');
      //There are two heights to distinguish, one is the actual height of the html page, and the page height of the generated pdf (841.89)
      //When the content does not exceed the range of pdf page display, there is no need to paginate
      if (leftHeight < pageHeight) {
        pdf.addImage(pageData, 'JPEG', 0, 0, imgWidth, imgHeight);
      } else {
        while (leftHeight > 0) {
          pdf.addImage(pageData, 'JPEG', 0, position, imgWidth, imgHeight);
          leftHeight -= pageHeight;
          position -= 841.89;
          //Avoid adding blank pages
          if (leftHeight > 0) {
            pdf.addPage();
          }
        }
      }
      // data.style.width = '50%';
      // boxDraw.style.overflowX = 'scroll';
      pdf.save(fullName);
      data.style.display = 'none';
    });
  }

  drop(){

  }

  onChange() {
    if(this.tatamicount < 1){
      this.tatamicount = 1;
    }
    if(this.brigadecount < 1){
      this.brigadecount = 1;
    }
    this.setDefaultBrigade();
    this.buidReadedBrigade();
  }

  onClose(refery, element, index, tatamiId, brigadeid, typeRefery) {
    let type = Number(typeRefery);
    let idx = this.referyBrigades.findIndex(
      (x) => x.tatamiId == tatamiId && x.brigadeid == brigadeid
    );

    switch (type) {
      case 0:
        this.referyBrigades[idx].sushinValidationError = false;
        this.referyBrigades[idx].sushin = -1;
        break;
      case 1:
        this.referyBrigades[idx].fukushin1ValidationError = false;
        this.referyBrigades[idx].fukushin1 = -1;
        break;
      case 2:
        this.referyBrigades[idx].fukushin2ValidationError = false;
        this.referyBrigades[idx].fukushin2 = -1;
        break;
      case 3:
        this.referyBrigades[idx].fukushin3ValidationError = false;
        this.referyBrigades[idx].fukushin3 = -1;
        break;
      case 4:
        this.referyBrigades[idx].fukushin4ValidationError = false;
        this.referyBrigades[idx].fukushin4 = -1;
        break;
    }
  }

  
  async updateReferyBrigade() {

      for (let i = 0; i < this.referys.length; i++) {
        this.referys[i].TatamiId = -1;
        this.referys[i].BrigadeId = -1;
        this.referys[i].sushin = -1;
      }

      for (let i = 0; i < this.referyBrigades.length; i++) {
          let brigade = this.referyBrigades[i];

          let idx = this.referys.findIndex(
            (x) => x.ReferyId == brigade.sushin
          );

          if(idx >= 0){           
            this.referys[idx].TatamiId = brigade.tatamiId;
            this.referys[idx].BrigadeId = brigade.brigadeid;
            this.referys[idx].sushin = 0;
          }

          idx = this.referys.findIndex(
            (x) => x.ReferyId == brigade.fukushin1
          );
          if(idx >= 0){
            this.referys[idx].TatamiId = brigade.tatamiId;
            this.referys[idx].BrigadeId = brigade.brigadeid;
            this.referys[idx].sushin = 1;
          }

          idx = this.referys.findIndex(
            (x) => x.ReferyId == brigade.fukushin2
          );
          if(idx >= 0){
            this.referys[idx].TatamiId = brigade.tatamiId;
            this.referys[idx].BrigadeId = brigade.brigadeid;
            this.referys[idx].sushin = 2;
          }

          idx = this.referys.findIndex(
            (x) => x.ReferyId == brigade.fukushin3
          );
          if(idx >= 0){
            this.referys[idx].TatamiId = brigade.tatamiId;
            this.referys[idx].BrigadeId = brigade.brigadeid;
            this.referys[idx].sushin = 3;
          }

          idx = this.referys.findIndex(
            (x) => x.ReferyId == brigade.fukushin4
          );
          if(idx >= 0){
            this.referys[idx].TatamiId = brigade.tatamiId;
            this.referys[idx].BrigadeId = brigade.brigadeid;
            this.referys[idx].sushin = 4;
          }
      }
  
      let referys = {
        title: this.filter.title,
        referys: this.referys
      };

      this.regreferyservice.updateReferyBrigade(referys).subscribe(
      );

      // await this.regreferyservice.updateReferyBrigade(brigades);

      // await this.loadAthletes(this.model, () => {
      //   this.renewSelectedParticipants();
      // });
    // }
  }

  onReferySelect(refery, element, index, tatamiId, brigadeid, typeRefery) {
    
    let idx;
    let srcRefery = this.referys.find(
      (x) => x.ReferyId == refery
    );
    if (!srcRefery) {
      return
    }

    // let srcRefery = this.referys[refery];
    let isBad;
    this.activeBrigade = this.referyBrigades.find(
      (x) => x.tatamiId == tatamiId && x.brigadeid == brigadeid
    );

    // Проверяем на дубль в пределах бригады
    let idxBragade = this.referyBrigades.findIndex(
      (x) => x.tatamiId == tatamiId && x.brigadeid == brigadeid
    );


    isBad = this.isBadReferyInBrigade(idxBragade, srcRefery, typeRefery);
    if (!isBad) {
      idx = this.referyBrigades.findIndex(
        (x) => (x.sushin == srcRefery.ReferyId) || (x.fukushin1 == srcRefery.ReferyId) ||
          (x.fukushin2 == srcRefery.ReferyId) || (x.fukushin3 == srcRefery.ReferyId) ||
          (x.fukushin4 == srcRefery.ReferyId)
      );

      let activeBrigadeIdx = this.referyBrigades.findIndex(
        (x) => x.tatamiId == tatamiId && x.brigadeid == brigadeid
      );

      isBad = this.isBadReferyInOtherBrigade(idx, activeBrigadeIdx, srcRefery, typeRefery);
      if (!isBad) {
        this.setRefery(srcRefery, typeRefery, tatamiId, brigadeid)
      }
    }
  }

  isBadReferyInOtherBrigade(index, activeBrigadeIdx, srcRefery, typeRefery) {
    let x = Number(typeRefery);
    let result = false;
    for (let i = 0; i < this.referyBrigades.length; i++) {
      let item = this.referyBrigades[i];

      result = (item.sushin == Number(srcRefery.ReferyId) || item.fukushin1 == Number(srcRefery.ReferyId) ||
        item.fukushin2 == Number(srcRefery.ReferyId) || item.fukushin3 == Number(srcRefery.ReferyId) ||
        item.fukushin4 == Number(srcRefery.ReferyId)) && (i != activeBrigadeIdx);

      switch (x) {
        case 0:
          this.referyBrigades[activeBrigadeIdx].sushinValidationError = result;
          if (result) {
            break;
          };
        case 1:
          this.referyBrigades[activeBrigadeIdx].fukushin1ValidationError = result;
          if (result) {
            break;
          };
        case 2:
          this.referyBrigades[activeBrigadeIdx].fukushin2ValidationError = result;
          if (result) {
            break;
          };
        case 3:
          this.referyBrigades[activeBrigadeIdx].fukushin3ValidationError = result;
          if (result) {
            break;
          };
        case 4:
          this.referyBrigades[activeBrigadeIdx].fukushin4ValidationError = result;
          if (result) {
            break;
          };
      }
      if (result) {
        break;
      };
    }
    return result;
  }

  isBadReferyInBrigade(index, srcRefery, typeRefery) {
    let result = false;
    let x = Number(typeRefery);

    switch (x) {
      case 0:
        result = Number(srcRefery.ReferyId) == this.activeBrigade.fukushin1 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin2 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin3 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin4;
        this.referyBrigades[index].sushinValidationError = result;
        break;
      case 1:
        result = Number(srcRefery.ReferyId) == this.activeBrigade.sushin ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin2 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin3 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin4;
        this.referyBrigades[index].fukushin1ValidationError = result;
        break;
      case 2:
        result = Number(srcRefery.ReferyId) == this.activeBrigade.sushin ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin1 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin3 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin4;
        this.referyBrigades[index].fukushin2ValidationError = result;
        break;
      case 3:
        result = Number(srcRefery.ReferyId) == this.activeBrigade.sushin ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin1 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin2 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin4;
        this.referyBrigades[index].fukushin3ValidationError = result;
        break;
      case 4:
        result = Number(srcRefery.ReferyId) == this.activeBrigade.sushin ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin1 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin2 ||
          Number(srcRefery.ReferyId) == this.activeBrigade.fukushin3;
        this.referyBrigades[index].fukushin4ValidationError = result;
        break;
    }

    return result;
  }

  isUsedRefery(refery) {
    let result = false
    let idx = this.referyBrigades.findIndex(
      (x) => x.sushin == refery.ReferyId || x.fukushin1 == refery.ReferyId || x.fukushin2 == refery.ReferyId ||
        x.fukushin3 == refery.ReferyId || x.fukushin4 == refery.ReferyId
    );
    return idx >= 0
  }

  setRefery(srcRefery, typeRefery, tatamiId, brigadeid) {
    let x = Number(typeRefery);

    let index = this.referyBrigades.findIndex(
      (x) => x.tatamiId == tatamiId && x.brigadeid == brigadeid
    );

    switch (x) {
      case 0:
        this.referyBrigades[index].sushin = Number(srcRefery.ReferyId);
        this.activeBrigade.sushin = Number(srcRefery.ReferyId);
        break;
      case 1:
        this.activeBrigade.fukushin1 = Number(srcRefery.ReferyId);
        this.referyBrigades[index].fukushin1 = Number(srcRefery.ReferyId);
        break;
      case 2:
        this.referyBrigades[index].fukushin2 = Number(srcRefery.ReferyId);
        this.activeBrigade.fukushin2 = Number(srcRefery.ReferyId);
        break;
      case 3:
        this.referyBrigades[index].fukushin3 = Number(srcRefery.ReferyId);
        this.activeBrigade.fukushin3 = Number(srcRefery.ReferyId);
        break;
      case 4:
        this.referyBrigades[index].fukushin4 = Number(srcRefery.ReferyId);
        this.activeBrigade.fukushin4 = Number(srcRefery.ReferyId);
        break;
    }

  }

  async readMaxTatamiBrigade() {
    // let maxTatami = -1;
    // let maxBrigade = -1;
    // for (let i = 0; i < this.referys.length; i++) {
    //   maxTatami = Math.max(maxTatami, this.referys[i].TatamiId);
    //   maxBrigade = Math.max(maxBrigade, this.referys[i].BrigadeId);
    // }

    // if (maxTatami > 0) { this.tatamicount = maxTatami }
    // if (maxBrigade > 0) { this.brigadecount = maxBrigade }   

    // const [first] = this.referys;
    // const maxTatami = this.referys.reduce((acc, item) => Math.max(acc, item.TatamiId), first);

    let max = this.referys.reduce((acc, curr) => acc.TatamiId > curr.TatamiId ? acc : curr);
    this.tatamicount = max.TatamiId;

    max = this.referys.reduce((acc, curr) => acc.BrigadeId > curr.BrigadeId ? acc : curr);
    this.brigadecount = max.BrigadeId;
    console.log(this.brigadecount);
    
    // const LargestNum = this.referys.reduce((prev, curr) => {
    //   let max = Math.max(prev.TatamiId, curr.TatamiId)
    //   return max;
    // });

  //   const max = this.referys?.reduce((acc, item) => {
  //     return acc > item.TatamiId ? acc : item.TatamiId;
  // });
  }


  buidReadedBrigade() {
    let idxBrigade : number;
    let x : number
    console.log(this.brigadecount);
    console.log(this.tatamicount);
    
    for (let i = 0; i < this.referys.length; i++) {
      if(this.referys[i].BrigadeId > this.brigadecount){
        this.referys[i].BrigadeId = -1;
      }
      if(this.referys[i].TatamiId > this.tatamicount){
        this.referys[i].TatamiId = -1;
      }

      idxBrigade = this.referyBrigades.findIndex(
        (x) => x.tatamiId == this.referys[i].TatamiId && x.brigadeid == this.referys[i].BrigadeId
      );
      
      if (idxBrigade >= 0) {
        x = this.referys[i].sushin;

        if(x == 0){
          this.referyBrigades[idxBrigade].sushin = this.referys[i].ReferyId;
          this.referyBrigades[idxBrigade].selectedSushin = this.referys[i].ReferyId;
        }

        if(x == 1){
          this.referyBrigades[idxBrigade].fukushin1 = this.referys[i].ReferyId;
          this.referyBrigades[idxBrigade].selectedFukushin1 = this.referys[i].ReferyId;
        }

        if(x == 2){
          this.referyBrigades[idxBrigade].fukushin2 = this.referys[i].ReferyId
          this.referyBrigades[idxBrigade].selectedFukushin2 = this.referys[i].ReferyId;
        }
        if(x == 3){
          this.referyBrigades[idxBrigade].fukushin3 = this.referys[i].ReferyId;
          this.referyBrigades[idxBrigade].selectedFukushin3 = this.referys[i].ReferyId;
        }
        if(x == 4){
          this.referyBrigades[idxBrigade].fukushin4 = this.referys[i].ReferyId;
          this.referyBrigades[idxBrigade].selectedFukushin4 = this.referys[i].ReferyId;
        }  
      }
    }    
  }

  setDefaultBrigade() {
    this.referyBrigades.splice(0, this.referyBrigades.length);
    for (let i = 1; i <= this.tatamicount; i++) {
      for (let j = 1; j <= this.brigadecount; j++) {
        let brigade = new ReferyBrigade();
        brigade.tatamiId = i;
        brigade.brigadeid = j;
        brigade.sushin = -1;
        brigade.fukushin1 = -1;
        brigade.fukushin2 = -1;
        brigade.fukushin3 = -1;
        brigade.fukushin4 = -1;
        this.referyBrigades.push(brigade);
      }
    }
  }

  onSelectChange() {

  }

  getRefery(referyId) {
    let refery = this.referys[referyId];
    let result;
    this.translateService
      .get('db.country.' + refery?.countryId)
      .subscribe((res: string) => {
        result = res;
      });
    return refery.FIO + ' ' + result;
  }

  defineLng() {
    let lng = localStorage.getItem('lng');

    if (lng && lng.length > 1) {
      lng = lng[0].toUpperCase() + lng.slice(1);
    }

    return lng;
  }

  getName(refery): string {
    this.lng = this.defineLng();
    let name: string = '';

    if (this.lng.toUpperCase() == 'UA') {
      name = refery?.countryNameUa;
    }

    if (this.lng.toUpperCase() == 'RU') {
      name = refery?.countryNameRu;
    }

    if (this.lng.toUpperCase() == 'EN') {
      name = refery?.countryNameEn;
    }
    return name;
  }


  loadCountries() {
    this.homeService.getAllCountries().subscribe((response) => {
      this.countries = Object.values(response);
    });
  }

  async loadClubs(region, country, lng) {
    this.homeService.getAllClubs({ region, country, lng }).subscribe((response) => {
      // this.homeService.getAnyClubs().subscribe((response) => {
      this.clubs = Object.values(response);
    });
  }

}
